## 데이터와 연산

* 숫자(Numbers)
  * +, *, -, /
* 문자열(String)
  * length, substring
* 영상/소리/기타 등등



* 이를 구분하는 이유는, 데이터마다 처리하는 방식이 다르기 때문.





### 자바의 데이터 타입

```java
public class Datatype {
	public static void main(String[] args) {
		System.out.println(6); 	     // Number  
		System.out.println("Six");   // String
		
		System.out.println("6");     // String 6
		
		System.out.println(6+6);     // 12
		System.out.println("6"+"6"); // 66 < 결합 연산자가 됨.
		
		System.out.println(6*6);	 // 36
//		System.out.println("6"*"6"); // Error 발생.
		
		System.out.println("1111".length()); // 4 문자열의 길이를 알려주는 연산.
//		System.out.println(1111.length()); 	 // 이러한 연산은 존재하지 않음.
		
		// 타입에 어울리는 연산법이 있기 때문에, 타입을 엄격하게 분류한다.
		// 1. 해당 프로그램에 어떤 종류의 데이터 타입이 있는지 알아가기.
		// 2. 각각의 데이터 타입별로 어떤 연산 방법들이 존재하나 알아가기.
		
	}
}
```



### 숫자와 연산

```java
public class Number {
	public static void main(String[] args) {
		// Operator (연산자) 
		System.out.println(6+2); // 8
		System.out.println(6-2); // 4
		System.out.println(6*2); // 12
		System.out.println(6/2); // 3
		
		System.out.println(Math.PI); // 3.141592653589793
		System.out.println(Math.floor(Math.PI)); //3.0 내림 
		System.out.println(Math.ceil(Math.PI));  //4.0 올림 
	}
}
```





### 문자열의 표현

```java
public class StringApp {
	public static void main(String[] args) {
		System.out.println("Hello World"); // String
//		System.out.println('Hello World'); // Error! ''==Character
		System.out.println('H'); 		   // Character
		System.out.println("H");
		
		System.out.println("Hello "
				+ "World"); // 중간에 엔터를 넣으면, 이클립스 내에서 자동적으로 + 를 넣어줌. 줄바꾸기는 아님.
		
		// new Line
		System.out.println("Hello \nWorld"); 
		
		// escape
		System.out.println("Hello \"World\""); //Hello "World"
		
	}
}
```





### 문자열 다루기

```java
public class StringOperation {
	public static void main(String[] args) {
		
		System.out.println("Hello World".length()); // 문자열의 글자수를 알려준다.
		System.out.println("Hello, [[[name]]] ... bye".replace("[[[name]]]", "egoing")); // 글 바꾸기
		
		// 문자열과 관련된 기능을 이용해, 여러 문제를 해결할 수 있다.
	}
}
```



### 작심삼일이 되었을 때 어떻게 해야 할까

* 절대 "나는 의지가 박약이다" 라고 생각하지 않기.

* 과감히 공부를 중단 후, 배운 것을 되새겨 보며 삶의 문제들과 연결지어 보고, 실제로 해결하기 위해 노력해 본다.
* 이 작업으로 우리가 배우고 있는 것들이 우리의 삶에 쓸모있다는 것을 뇌에 증명할 수 있는 것이다.
* 뇌의 흥분도가 올라가고, "더 공부해도 좋다"는 명령을 내리게 된다.

* **일을 해야할 때와 공부를 해야할 때를 주체적으로 판단할 수 있는 사람이 되자.**



## 변수

#### 변수 지정

* 포장되어 이름이 적혀져 있는 음료수와 같이, 변수를 만들 때 데이터 타입을 지정하는 이유는, 
  데이터 타입을 바로 판단할 수 있기 때문.

```java
public class Variable {
	public static void main(String[] args) {
//		a = 1; 이라고 하면, 자바는 어떤 데이터 타입이 들어가는지 명시를 해주어야한다.
		//  Number -> integer(정수) ... -2, -1, 0, 1, 2...
		int a = 1;
		System.out.println(a);
		
//		int b = 1.1;. int는 정수만 가능한데, 1.1은 실수 이므로
		// real number -> double ... -2.0, -1.0, 0, 1.0, 2.0
		double b = 1.1;
		System.out.println(b);
		
		String c = "Hello World";
		System.out.println(c);
		
		//표현하고자 하는타입이 무엇인지 정확한 파악이 중요하다.
	}
}
```



#### 변수의 효용

```java
public class Letter {

	public static void main(String[] args) {
		
		String name = "egoing";
		//String name = "leezche"; 로 바꾸면, name 내의 내용이 변경됨.
				
		System.out.println("Hello, "+name+" ... "+name+" ... "+name+" ... bye");
		// egoing을 일일히 바꿔야 하는 경우, 변수 사용.
		
		double VAT = 10.0;
		System.out.println(VAT);
		// 변수를 사용하면, 왜 이러한 숫자를,혹은 문자를 사용했는지 의미를 더 빠르게 파악할 수 있다.
		// 값에 이름을 부여하는 것이기 때문.
	}
}
```



#### 데이터 타입의 변환

* 데이터 타입을 컨버팅 하는 것.

  ```java
  public class Casting {
  
  	public static void main(String[] args) {
  		
  		double a = 1.1;
  		double b = 1; // 이러한 식으로 한다면, 1.0으로 컨버팅 된다.
  		//double b = (double) 1; 손실이 없기때문에 그냥 1로 써도 되는 것.
  
  		System.out.println(b);
  
  		// int c = 1.1; 값이 실수이기 때문에, int타입이 허용되지 않음.
  		double d = 1.1;
  		int e = (int) 1.1; // 값의 손실이 있기 때문에 명시적으로 형변환이 필요.
  		// 자바 내에서 잘못 썼을 때, 빨간 밑줄이 생기며 자동으로 변경시켜주는 방법을 제시함.
  		System.out.println(e);
  
  		// 1 to String
  		// 검색하는 능력을 기르기. 문법은 모르더라도, 익숙해지는것이 가장 중요하다.
  		String f = Integer.toString(1);
  		System.out.println(f.getClass()); // getClass는, 해당 변수가, 어떤 데이터 타입인지 알려주는 메서드.
  
  	}
  
  }
  ```



## 프로그래밍

#### 프로그래밍이란 무엇인가.

* 시간의 순서에 따라서 어떠한 일이 일어나는 것들을 "프로그램"이라고 부르고 있다.
* 시간에 따라 컴퓨터가 정해진 순서에 작업을 실행하게 된다면, 업무를 자동적으로 처리할 수 있게 된다.
* 컴퓨터 언어를 이용해, 프로그램을 만드는 것은 업무의 자동화된 처리를 위해서라고 할 수 있다.